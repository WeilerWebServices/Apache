#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class GatewayApprovalStatus(object):
    REQUESTED = 0
    APPROVED = 1
    ACTIVE = 2
    DEACTIVATED = 3
    CANCELLED = 4
    DENIED = 5
    CREATED = 6
    DEPLOYED = 7

    _VALUES_TO_NAMES = {
        0: "REQUESTED",
        1: "APPROVED",
        2: "ACTIVE",
        3: "DEACTIVATED",
        4: "CANCELLED",
        5: "DENIED",
        6: "CREATED",
        7: "DEPLOYED",
    }

    _NAMES_TO_VALUES = {
        "REQUESTED": 0,
        "APPROVED": 1,
        "ACTIVE": 2,
        "DEACTIVATED": 3,
        "CANCELLED": 4,
        "DENIED": 5,
        "CREATED": 6,
        "DEPLOYED": 7,
    }


class Gateway(object):
    """
    Attributes:
     - custosInternalGatewayId
     - gatewayId
     - gatewayApprovalStatus
     - gatewayName
     - domain
     - emailAddress
     - gatewayAcronym
     - gatewayURL
     - gatewayPublicAbstract
     - reviewProposalDescription
     - gatewayAdminFirstName
     - gatewayAdminLastName
     - gatewayAdminEmail
     - identityServerUserName
     - identityServerPasswordToken
     - declinedReason
     - oauthClientId
     - oauthClientSecret
     - requestCreationTime
     - requesterUsername

    """


    def __init__(self, custosInternalGatewayId=None, gatewayId=None, gatewayApprovalStatus=None, gatewayName=None, domain=None, emailAddress=None, gatewayAcronym=None, gatewayURL=None, gatewayPublicAbstract=None, reviewProposalDescription=None, gatewayAdminFirstName=None, gatewayAdminLastName=None, gatewayAdminEmail=None, identityServerUserName=None, identityServerPasswordToken=None, declinedReason=None, oauthClientId=None, oauthClientSecret=None, requestCreationTime=None, requesterUsername=None,):
        self.custosInternalGatewayId = custosInternalGatewayId
        self.gatewayId = gatewayId
        self.gatewayApprovalStatus = gatewayApprovalStatus
        self.gatewayName = gatewayName
        self.domain = domain
        self.emailAddress = emailAddress
        self.gatewayAcronym = gatewayAcronym
        self.gatewayURL = gatewayURL
        self.gatewayPublicAbstract = gatewayPublicAbstract
        self.reviewProposalDescription = reviewProposalDescription
        self.gatewayAdminFirstName = gatewayAdminFirstName
        self.gatewayAdminLastName = gatewayAdminLastName
        self.gatewayAdminEmail = gatewayAdminEmail
        self.identityServerUserName = identityServerUserName
        self.identityServerPasswordToken = identityServerPasswordToken
        self.declinedReason = declinedReason
        self.oauthClientId = oauthClientId
        self.oauthClientSecret = oauthClientSecret
        self.requestCreationTime = requestCreationTime
        self.requesterUsername = requesterUsername

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.custosInternalGatewayId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.gatewayId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.gatewayApprovalStatus = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.gatewayName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.domain = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.emailAddress = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.gatewayAcronym = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.gatewayURL = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.gatewayPublicAbstract = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.reviewProposalDescription = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.gatewayAdminFirstName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.gatewayAdminLastName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.gatewayAdminEmail = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.identityServerUserName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.identityServerPasswordToken = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRING:
                    self.declinedReason = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.oauthClientId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 18:
                if ftype == TType.STRING:
                    self.oauthClientSecret = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 19:
                if ftype == TType.I64:
                    self.requestCreationTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 20:
                if ftype == TType.STRING:
                    self.requesterUsername = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Gateway')
        if self.custosInternalGatewayId is not None:
            oprot.writeFieldBegin('custosInternalGatewayId', TType.STRING, 1)
            oprot.writeString(self.custosInternalGatewayId.encode('utf-8') if sys.version_info[0] == 2 else self.custosInternalGatewayId)
            oprot.writeFieldEnd()
        if self.gatewayId is not None:
            oprot.writeFieldBegin('gatewayId', TType.STRING, 2)
            oprot.writeString(self.gatewayId.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayId)
            oprot.writeFieldEnd()
        if self.gatewayApprovalStatus is not None:
            oprot.writeFieldBegin('gatewayApprovalStatus', TType.I32, 3)
            oprot.writeI32(self.gatewayApprovalStatus)
            oprot.writeFieldEnd()
        if self.gatewayName is not None:
            oprot.writeFieldBegin('gatewayName', TType.STRING, 4)
            oprot.writeString(self.gatewayName.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayName)
            oprot.writeFieldEnd()
        if self.domain is not None:
            oprot.writeFieldBegin('domain', TType.STRING, 5)
            oprot.writeString(self.domain.encode('utf-8') if sys.version_info[0] == 2 else self.domain)
            oprot.writeFieldEnd()
        if self.emailAddress is not None:
            oprot.writeFieldBegin('emailAddress', TType.STRING, 6)
            oprot.writeString(self.emailAddress.encode('utf-8') if sys.version_info[0] == 2 else self.emailAddress)
            oprot.writeFieldEnd()
        if self.gatewayAcronym is not None:
            oprot.writeFieldBegin('gatewayAcronym', TType.STRING, 7)
            oprot.writeString(self.gatewayAcronym.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayAcronym)
            oprot.writeFieldEnd()
        if self.gatewayURL is not None:
            oprot.writeFieldBegin('gatewayURL', TType.STRING, 8)
            oprot.writeString(self.gatewayURL.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayURL)
            oprot.writeFieldEnd()
        if self.gatewayPublicAbstract is not None:
            oprot.writeFieldBegin('gatewayPublicAbstract', TType.STRING, 9)
            oprot.writeString(self.gatewayPublicAbstract.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayPublicAbstract)
            oprot.writeFieldEnd()
        if self.reviewProposalDescription is not None:
            oprot.writeFieldBegin('reviewProposalDescription', TType.STRING, 10)
            oprot.writeString(self.reviewProposalDescription.encode('utf-8') if sys.version_info[0] == 2 else self.reviewProposalDescription)
            oprot.writeFieldEnd()
        if self.gatewayAdminFirstName is not None:
            oprot.writeFieldBegin('gatewayAdminFirstName', TType.STRING, 11)
            oprot.writeString(self.gatewayAdminFirstName.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayAdminFirstName)
            oprot.writeFieldEnd()
        if self.gatewayAdminLastName is not None:
            oprot.writeFieldBegin('gatewayAdminLastName', TType.STRING, 12)
            oprot.writeString(self.gatewayAdminLastName.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayAdminLastName)
            oprot.writeFieldEnd()
        if self.gatewayAdminEmail is not None:
            oprot.writeFieldBegin('gatewayAdminEmail', TType.STRING, 13)
            oprot.writeString(self.gatewayAdminEmail.encode('utf-8') if sys.version_info[0] == 2 else self.gatewayAdminEmail)
            oprot.writeFieldEnd()
        if self.identityServerUserName is not None:
            oprot.writeFieldBegin('identityServerUserName', TType.STRING, 14)
            oprot.writeString(self.identityServerUserName.encode('utf-8') if sys.version_info[0] == 2 else self.identityServerUserName)
            oprot.writeFieldEnd()
        if self.identityServerPasswordToken is not None:
            oprot.writeFieldBegin('identityServerPasswordToken', TType.STRING, 15)
            oprot.writeString(self.identityServerPasswordToken.encode('utf-8') if sys.version_info[0] == 2 else self.identityServerPasswordToken)
            oprot.writeFieldEnd()
        if self.declinedReason is not None:
            oprot.writeFieldBegin('declinedReason', TType.STRING, 16)
            oprot.writeString(self.declinedReason.encode('utf-8') if sys.version_info[0] == 2 else self.declinedReason)
            oprot.writeFieldEnd()
        if self.oauthClientId is not None:
            oprot.writeFieldBegin('oauthClientId', TType.STRING, 17)
            oprot.writeString(self.oauthClientId.encode('utf-8') if sys.version_info[0] == 2 else self.oauthClientId)
            oprot.writeFieldEnd()
        if self.oauthClientSecret is not None:
            oprot.writeFieldBegin('oauthClientSecret', TType.STRING, 18)
            oprot.writeString(self.oauthClientSecret.encode('utf-8') if sys.version_info[0] == 2 else self.oauthClientSecret)
            oprot.writeFieldEnd()
        if self.requestCreationTime is not None:
            oprot.writeFieldBegin('requestCreationTime', TType.I64, 19)
            oprot.writeI64(self.requestCreationTime)
            oprot.writeFieldEnd()
        if self.requesterUsername is not None:
            oprot.writeFieldBegin('requesterUsername', TType.STRING, 20)
            oprot.writeString(self.requesterUsername.encode('utf-8') if sys.version_info[0] == 2 else self.requesterUsername)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.gatewayId is None:
            raise TProtocolException(message='Required field gatewayId is unset!')
        if self.gatewayApprovalStatus is None:
            raise TProtocolException(message='Required field gatewayApprovalStatus is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Gateway)
Gateway.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'custosInternalGatewayId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'gatewayId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'gatewayApprovalStatus', None, None, ),  # 3
    (4, TType.STRING, 'gatewayName', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'domain', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'emailAddress', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'gatewayAcronym', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'gatewayURL', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'gatewayPublicAbstract', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'reviewProposalDescription', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'gatewayAdminFirstName', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'gatewayAdminLastName', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'gatewayAdminEmail', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'identityServerUserName', 'UTF8', None, ),  # 14
    (15, TType.STRING, 'identityServerPasswordToken', 'UTF8', None, ),  # 15
    (16, TType.STRING, 'declinedReason', 'UTF8', None, ),  # 16
    (17, TType.STRING, 'oauthClientId', 'UTF8', None, ),  # 17
    (18, TType.STRING, 'oauthClientSecret', 'UTF8', None, ),  # 18
    (19, TType.I64, 'requestCreationTime', None, None, ),  # 19
    (20, TType.STRING, 'requesterUsername', 'UTF8', None, ),  # 20
)
fix_spec(all_structs)
del all_structs
